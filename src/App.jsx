
import { useState } from "react";
import QRCode from "react-qr-code";

export default function App() {
  const [tab, setTab] = useState("user");
  const [formData, setFormData] = useState({
    inventory: "",
    name: "",
    organization: "",
    position: "",
    category: "",
    type: "",
    description: "",
  });
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [adminLogin, setAdminLogin] = useState("");
  const [adminPass, setAdminPass] = useState("");
  const [isAdmin, setIsAdmin] = useState(false);

  const handleUserSubmit = () => {
    if (Object.values(formData).every(Boolean)) {
      setIsSubmitted(true);
    } else {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è");
    }
  };

  const handleAdminLogin = () => {
    if (adminLogin === "admin" && adminPass === "admin123") {
      setIsAdmin(true);
    } else {
      alert("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
    }
  };

  return (
    <div className="p-4 max-w-xl mx-auto">
      <div className="flex space-x-4 mb-4">
        <button
          className={tab === "user" ? "font-bold underline" : ""}
          onClick={() => setTab("user")}
        >
          User ‚Äì –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É
        </button>
        <button
          className={tab === "admin" ? "font-bold underline" : ""}
          onClick={() => setTab("admin")}
        >
          Admin
        </button>
      </div>

      {tab === "user" && (
        <div>
          {isSubmitted ? (
            <div className="text-center">
              <p>‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞</p>
              <button className="mt-4 border px-4 py-2">–°–∫–∞—á–∞—Ç—å —Ñ–æ—Ä–º—É –∑–∞—è–≤–∫–∏</button>
            </div>
          ) : (
            <form className="space-y-2">
              <input className="w-full border p-2" placeholder="–ò–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä" onChange={(e) => setFormData({ ...formData, inventory: e.target.value })} />
              <input className="w-full border p-2" placeholder="–§–ò–û" onChange={(e) => setFormData({ ...formData, name: e.target.value })} />
              <input className="w-full border p-2" placeholder="–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è" onChange={(e) => setFormData({ ...formData, organization: e.target.value })} />
              <input className="w-full border p-2" placeholder="–î–æ–ª–∂–Ω–æ—Å—Ç—å" onChange={(e) => setFormData({ ...formData, position: e.target.value })} />
              <input className="w-full border p-2" placeholder="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞—è–≤–∫–∏" onChange={(e) => setFormData({ ...formData, category: e.target.value })} />
              <input className="w-full border p-2" placeholder="–¢–∏–ø" onChange={(e) => setFormData({ ...formData, type: e.target.value })} />
              <textarea className="w-full border p-2" placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ" onChange={(e) => setFormData({ ...formData, description: e.target.value })}></textarea>
              <button type="button" className="w-full bg-blue-500 text-white py-2" onClick={handleUserSubmit}>–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É</button>
            </form>
          )}
        </div>
      )}

      {tab === "admin" && (
        <div className="space-y-2">
          {!isAdmin ? (
            <>
              <input className="w-full border p-2" placeholder="–õ–æ–≥–∏–Ω" onChange={(e) => setAdminLogin(e.target.value)} />
              <input className="w-full border p-2" type="password" placeholder="–ü–∞—Ä–æ–ª—å" onChange={(e) => setAdminPass(e.target.value)} />
              <button className="w-full bg-green-600 text-white py-2" onClick={handleAdminLogin}>–í–æ–π—Ç–∏</button>
            </>
          ) : (
            <div>
              <p className="font-bold mb-2">–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</p>
              <p>üìã –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ—Ö–Ω–∏–∫–µ</p>
            </div>
          )}
        </div>
      )}

      <div className="mt-8 text-center">
        <p className="mb-2 font-medium">üì± QR-–∫–æ–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å–∞–π—Ç—É:</p>
        <div className="inline-block p-2 bg-white shadow">
          <QRCode value="https://qr-portal-rouge.vercel.app" />
        </div>
      </div>
    </div>
  );
}
